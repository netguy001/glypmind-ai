name: Deploy GlyphMind AI

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy-backend:
    name: Deploy Backend to Railway
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          cd backend
          railway login --token $RAILWAY_TOKEN
          railway up --service backend

  deploy-frontend:
    name: Deploy Frontend to Hugging Face Spaces
    runs-on: ubuntu-latest
    needs: deploy-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Hugging Face Hub
        run: |
          pip install huggingface_hub

      - name: Deploy to Hugging Face Spaces
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_USERNAME: ${{ secrets.HF_USERNAME }}
          HF_SPACE_NAME: ${{ secrets.HF_SPACE_NAME }}
          BACKEND_URL: ${{ secrets.BACKEND_URL }}
        run: |
          cd frontend
          
          # Create .env file with backend URL
          echo "BACKEND_URL=$BACKEND_URL" > .env
          
          # Login to Hugging Face
          python -c "
          from huggingface_hub import HfApi, login
          import os
          
          login(token=os.environ['HF_TOKEN'])
          api = HfApi()
          
          # Upload files to Hugging Face Spaces
          api.upload_folder(
              folder_path='.',
              repo_id=f\"{os.environ['HF_USERNAME']}/{os.environ['HF_SPACE_NAME']}\",
              repo_type='space',
              commit_message='Auto-deploy from GitHub Actions'
          )
          "

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()
    steps:
      - name: Deployment Success
        if: needs.deploy-backend.result == 'success' && needs.deploy-frontend.result == 'success'
        run: |
          echo "✅ Both backend and frontend deployed successfully!"
          echo "Backend: Railway"
          echo "Frontend: Hugging Face Spaces"

      - name: Deployment Failed
        if: needs.deploy-backend.result == 'failure' || needs.deploy-frontend.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Backend status: ${{ needs.deploy-backend.result }}"
          echo "Frontend status: ${{ needs.deploy-frontend.result }}"
